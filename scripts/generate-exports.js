// scripts/generate-exports.js
import fs from "fs";
import path from "path";

const BASE_DIR = "src/components"; // Th∆∞ m·ª•c ch√≠nh

function isValid(file) {
  return /\.(js|jsx|ts|tsx)$/.test(file) && file !== "index.js";
}

function buildExport(file) {
  const name = path.basename(file, path.extname(file));
  return `export { default as ${name} } from "./${name}";`;
}

// H√†m t√¨m t·∫•t c·∫£ c√°c component trong m·ªôt th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
function findComponentsRecursively(
  folderPath,
  maxDepth = -1,
  currentDepth = 0
) {
  let components = [];

  try {
    const files = fs.readdirSync(folderPath);

    // L·ªçc ra c√°c file component trong th∆∞ m·ª•c hi·ªán t·∫°i
    files.forEach((file) => {
      const fullPath = path.join(folderPath, file);

      if (fs.statSync(fullPath).isFile() && isValid(file)) {
        components.push(file);
      } else if (
        fs.statSync(fullPath).isDirectory() &&
        (maxDepth === -1 || currentDepth < maxDepth)
      ) {
        // ƒê·ªá quy v√†o th∆∞ m·ª•c con n·∫øu ch∆∞a ƒë·∫°t ƒë·ªô s√¢u t·ªëi ƒëa
        const subComponents = findComponentsRecursively(
          fullPath,
          maxDepth,
          currentDepth + 1
        );
        components = components.concat(
          subComponents.map((c) => path.join(file, c))
        );
      }
    });
  } catch (error) {
    console.error(`‚ùå Error scanning ${folderPath}: ${error.message}`);
  }

  return components;
}

// H√†m t·∫°o index.js cho c√°c th∆∞ m·ª•c con tr·ª±c ti·∫øp
function generateIndexForDirectSubdirs() {
  try {
    const subdirs = fs.readdirSync(BASE_DIR).filter((item) => {
      const fullPath = path.join(BASE_DIR, item);
      return fs.statSync(fullPath).isDirectory();
    });

    console.log(
      `üîç ƒê√£ t√¨m th·∫•y ${subdirs.length} th∆∞ m·ª•c con trong ${BASE_DIR}`
    );

    subdirs.forEach((subdir) => {
      const subdirPath = path.join(BASE_DIR, subdir);

      // T√¨m t·∫•t c·∫£ c√°c component trong th∆∞ m·ª•c con n√†y v√† c√°c th∆∞ m·ª•c con c·ªßa n√≥
      const components = findComponentsRecursively(subdirPath);

      if (components.length > 0) {
        // T·∫°o c√°c export cho c√°c component tr·ª±c ti·∫øp
        const directComponents = components
          .filter((c) => !c.includes(path.sep))
          .map(buildExport)
          .join("\n");

        // T·∫°o c√°c export cho c√°c component trong th∆∞ m·ª•c con
        const nestedComponents = components
          .filter((c) => c.includes(path.sep))
          .map((c) => {
            const dirName = path.dirname(c);
            const fileName = path.basename(c, path.extname(c));
            return `export { default as ${fileName} } from "./${dirName}/${fileName}";`;
          })
          .join("\n");

        // K·∫øt h·ª£p t·∫•t c·∫£ c√°c export
        const allExports =
          [directComponents, nestedComponents].filter(Boolean).join("\n") +
          "\n";

        // Ghi v√†o file index.js
        fs.writeFileSync(path.join(subdirPath, "index.js"), allExports, "utf8");
        console.log(
          `‚úÖ Created index.js for ${subdirPath} with ${components.length} components`
        );
      } else {
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y component n√†o trong ${subdirPath}`);
      }
    });
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
  }
}

function main() {
  // Ki·ªÉm tra xem th∆∞ m·ª•c BASE_DIR c√≥ t·ªìn t·∫°i kh√¥ng
  if (!fs.existsSync(BASE_DIR)) {
    console.error(`‚ùå Th∆∞ m·ª•c ${BASE_DIR} kh√¥ng t·ªìn t·∫°i!`);
    console.log(`üí° G·ª£i √Ω: Ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c c·ªßa d·ª± √°n.`);
    console.log(
      `   C√≥ th·ªÉ b·∫°n ƒëang s·ª≠ d·ª•ng 'src/component' thay v√¨ 'src/components'?`
    );
    return;
  }

  try {
    console.log(
      `üîç B·∫Øt ƒë·∫ßu t·∫°o file index.js cho c√°c th∆∞ m·ª•c con tr·ª±c ti·∫øp c·ªßa ${BASE_DIR}...`
    );
    generateIndexForDirectSubdirs();
    console.log(`‚úÖ Ho√†n th√†nh`);
  } catch (error) {
    console.error(`‚ùå L·ªói: ${error.message}`);
  }
}

main();
